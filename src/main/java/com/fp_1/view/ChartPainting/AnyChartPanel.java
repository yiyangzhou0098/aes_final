/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.fp_1.view.ChartPainting;

import com.fp_1.model.statistics.Statitem;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author kai
 */
public class AnyChartPanel extends javax.swing.JPanel {

    /**
     * Creates new form AnyChartPanel
     */
    public int n;
    private ArrayList<Statitem> statlist=new ArrayList();
    
    public AnyChartPanel( ArrayList<Statitem> statlist) {
        this.n=statlist.size();
        //JOptionPane.showMessageDialog(this, n);
        this.statlist=statlist;
        initComponents();
    }
    int HEIGHT;
    int offsetY = 14;// y axis offset for text to be above the chart
    Font font = new Font("Times", Font.BOLD, 20);
    DecimalFormat df = new DecimalFormat("#.00");
    
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        HEIGHT = (int) (getHeight());
        int width = getWidth();
        int sum=0;
        for(Statitem item:statlist)
        {
            sum+=item.getNum();
        }
        
        int w80 = (int) (width * 0.8);// the 80% of the width of the page
        int w20 = (int) (width * 0.2);
        int bottom = getHeight() - 20; // actually the top instead
        
        //JOptionPane.showMessageDialog(this, bottom);

        int uw = w80 / n; // the column width
        int gap = w20 / (n+1); // the gap width

        // each percent present as the percent of the Height
        String str;
        g.setFont(font);

        
        for(int i=0;i<n;i++)
        {
             int rectH = (int) (HEIGHT * (statlist.get(i).getNum()/sum));
             Color charc = new Color(248,148,6);
             g.setColor(charc);
             g.fillRect((gap*(i+1)+uw*i), bottom - rectH, uw, rectH);
             g.setColor(Color.WHITE);
             str = statlist.get(i).getName()+"  As  "+df.format(statlist.get(i).getNum()/sum*100)+"%";
             g.drawString(str, (gap*(i+1)+uw*i), bottom - rectH - offsetY);
        }
       

        

        int x1, x2, y1, y2;
        x1 = gap / 2;
        y1 = bottom;
        x2 = width - gap / 2;
        y2 = y1;
        g.setColor(Color.BLACK);
        g.drawLine(x1, y1, x2, y2);

    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(44, 62, 80));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 900, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
